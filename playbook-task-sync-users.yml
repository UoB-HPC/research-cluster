- name: Sync users
  hosts: "mgmt.{{domain}}"
  become: true

  tasks:
    - name: Ensure IPA sudo group
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: "{{ipa_password}}"
        name: sudo

    - name: Ensure IPA sudo rule
      freeipa.ansible_freeipa.ipasudorule:
        ipaadmin_password: "{{ipa_password}}"
        name: sudo
        group: sudo
        cmdcat: all
        hostcat: all

    - name: Query uids
      command: ipa --no-prompt user-find --raw
      register: ipa_users

    - name: Extract uids
      set_fact:
        existing_users: "{{ipa_users.stdout | regex_findall('(?<=uid: )\\S+')}}"

    - name: "Find absent users"
      set_fact:
        users_to_delete: "{{existing_users | difference(users.keys()) | difference(['admin', 'root'])}}"

    - name: Debug and print existing_users
      debug:
        var: users_to_delete

    - name: "Drop absent users"
      freeipa.ansible_freeipa.ipauser:
        ipaadmin_password: "{{ipa_password}}"
        name: "{{item}}"
        state: absent
      loop: "{{users_to_delete}}"
      when: users_to_delete | length > 0 and delete_users | default(false) | bool

    - name: "Import all users"
      freeipa.ansible_freeipa.ipauser:
        ipaadmin_password: "{{ipa_password}}"
        name: "{{item.key}}"
        first: "{{item.value.first}}"
        last: "{{item.value.last}}"
        email: "{{item.value.email}}"
        sshpubkey: "{{item.value.publickey}}"
        uid: "{{range(1000, 32768) | random(seed=item.key)}}"
        gid: "{{range(1000, 32768) | random(seed=item.key)}}"
        state: present
        password: ""
        update_password: on_create
      loop: "{{users | dict2items}}"

    - name: Ensure user sudo rules
      freeipa.ansible_freeipa.ipagroup:
        ipaadmin_password: "{{ipa_password}}"
        name: sudo
        action: member
        user: "{{item.key}}"
      loop: "{{users | dict2items}}"
      when: item.value.group == "sudo"
